# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form_create_card.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# from PyQt5.QtGui import QIntValidator
import logging
import threading

from PySide2 import QtGui, QtWidgets, QtCore
# from PyQt5 import QtCore, QtGui, QtWidgets
from PySide2.QtGui import (QIntValidator, QMovie)
from PySide2.QtWidgets import QFrame, QAbstractItemView, QLabel
from files.movidesk import get_ticket, parser_ticket_content
from files.trello import load_boards, lists_of_lists, labels, members, id_of_list, id_of_members, id_of_labels, \
    create_card


class Ui_MainWindow(object):
    #
    #   Styles
    #
    styleLineEditOk = ("QLineEdit{\n"
                       "    border: 2px solid rgb(120,120,120);\n"
                       "    border-radius: 5px;\n"
                       "    padding: 1px 3px;\n"
                       "    background-color: rgb(79,79,79);\n"
                       "    color: rgb(185, 185, 185);\n"
                       "}\n"
                       "QLineEdit:hover{\n"
                       "    border: 2px solid rgb(70,70,70);\n"
                       "}\n"
                       "QLineEdit:focus{\n"
                       "    border: 2px solid rgb(0,102,204);\n"
                       "    color: rgb(200,200,200);\n"
                       "}")
    styleLineEditError = ("QLineEdit{\n"
                          "    border: 2px solid rgb(255, 164, 169);\n"
                          "    border-radius: 5px;\n"
                          "    padding: 1px 3px;\n"
                          "    background-color: rgb(79,79,79);\n"
                          "    color: rgb(185, 185, 185);\n"
                          "}\n"
                          "QLineEdit:hover{\n"
                          "    border: 2px solid rgb(70,70,70);\n"
                          "}\n"
                          "QLineEdit:focus{\n"
                          "    border: 2px solid rgb(0,102,204);\n"
                          "    color: rgb(200,200,200);\n"
                          "}")
    stylePopupError = ("background-color: rgb(255, 164, 169); border-radius: 7px;")
    stylePopupOk = ("background-color: rgb(0, 255, 123); border-radius: 7px;")

    #
    # Functions
    #
    def checkFields(self):
        self.pushButton_create.hide()
        # self.loadinginfo_animation.show()
        self.label_loading.show()

        # self.label_loading.hide()
        # print(self.movie.state())
        # self.movie.stop()

        def showMessage(message):
            # self.label_loading.show()
            self.label_loading.hide()
            self.loadinginfo_animation.hide()
            self.pushButton_create.show()
            self.pop_up.show()
            self.label_closemessage.setText(message)

        def clean_fields():
            self.line_ticket.setText('')
            self.comboBox_lists.setCurrentIndex(-1)
            for i in self.list_miembros.selectedItems():
                i.setSelected(False)
            for i in self.list_etiquetas.selectedItems():
                i.setSelected(False)
            # self.line_ticket.setFocus(0)

        def validate_values(ticket_digitado, lista_escogida, labels_escogidos, miembros_escogidos):
            name, description = parser_ticket_content(ticket_digitado)
            idList = id_of_list(lista_escogida)
            members = id_of_members(miembros_escogidos)
            labels = id_of_labels(labels_escogidos)
            resp = create_card(idList, name, description, members, labels)
            return resp

        def thread_function():
            logging.info("Thread %s: starting", )
            if not get_ticket(self.line_ticket.text()):
                text = "Ticket Inválido"
                # self.line_ticket.setStyleSheet(self.styleLineEditError)
                # self.pop_up.setStyleSheet(self.stylePopupError)
            else:
                ticket_digitado = self.line_ticket.text()
                lista_escogida = self.comboBox_lists.currentText()
                labels_escogidos = [etiqueta.text() for etiqueta in self.list_etiquetas.selectedItems()]
                miembros_escogidos = [miembro.text() for miembro in self.list_miembros.selectedItems()]
                validate_values(ticket_digitado, lista_escogida, labels_escogidos, miembros_escogidos)
                text = f"Ticket {ticket_digitado} criado com succeso!"
                # text = "Ticket criado com succeso!"
                clean_fields()
            showMessage(text)
            logging.info("Thread %s: finishing", )

        def fields_validation():
            #  Checking Ticket an List
            if not self.line_ticket.text():
                text = "Por Favor Digite o Número do Ticket"
                # self.line_ticket.setStyleSheet(self.styleLineEditError)
                # self.pop_up.setStyleSheet(self.stylePopupError)
                showMessage(text)
            elif self.comboBox_lists.currentText() == 'Seleciona Uma Lista':
                text = "Seleciona Uma Lista"
                # self.pop_up.setStyleSheet(self.stylePopupError)
                showMessage(text)
            else:
                format = "%(asctime)s: %(message)s"
                logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")
                logging.info("Main    : before creating thread")
                x = threading.Thread(target=thread_function)
                logging.info("Main    : before running thread")
                x.start()
                logging.info("Main    : wait for the thread to finish")
                # x.join()
                logging.info("Main    : all done")

        fields_validation()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(462, 587)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("files/img/trello_and_movidesk_icone.png"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(98, 114, 164);")
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.top_bar = QtWidgets.QFrame(self.frame)
        self.top_bar.setMinimumSize(QtCore.QSize(0, 35))
        self.top_bar.setMaximumSize(QtCore.QSize(16777215, 45))
        self.top_bar.setStyleSheet("")
        self.top_bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.top_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar.setObjectName("top_bar")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.top_bar)
        self.horizontalLayout_2.setContentsMargins(0, 5, 0, 5)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.pop_up = QtWidgets.QFrame(self.top_bar)
        self.pop_up.setMaximumSize(QtCore.QSize(450, 16777215))
        self.pop_up.setStyleSheet("background-color: rgb(39, 181, 252); border-radius: 7px;")
        self.pop_up.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.pop_up.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pop_up.setObjectName("pop_up")

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.pop_up)
        self.horizontalLayout_3.setContentsMargins(10, 3, 10, 3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        self.label_closemessage = QtWidgets.QLabel(self.top_bar)
        self.label_closemessage.setAlignment(QtCore.Qt.AlignCenter)
        self.label_closemessage.setStyleSheet("color: rgb(0,0,0);")
        self.label_closemessage.setObjectName("label_closemessage")
        self.horizontalLayout_3.addWidget(self.label_closemessage)
        # self.progressBar = QtWidgets.QProgressBar(self.top_bar)
        # self.progressBar.setGeometry(50, 5, 350, 25)
        # self.timer = QTimer()
        # self.step = 0
        # self.timer.setInterval(100)
        self.pushButton_close_error = QtWidgets.QPushButton(self.pop_up)
        self.pushButton_close_error.setMaximumSize(QtCore.QSize(20, 20))
        self.pushButton_close_error.setStyleSheet("QPushButton{    \n"
                                                  "    border-radius: 10px;\n"
                                                  "    background-position: center;\n"
                                                  "    background-image: url(files/img/closeicon2.png);\n"
                                                  "}\n"
                                                  "QPushButton:hover{\n"
                                                  "    background-color: rgb(255, 255, 255);\n"
                                                  "    color: rgb(200,200,200);\n"
                                                  "}\n"
                                                  "QPushButton:pressed{\n"
                                                  "    background-color: rgb(35,35,35);    \n"
                                                  "    color: rgb(200,200,200);\n"
                                                  "}")
        self.pushButton_close_error.setText("")
        self.pushButton_close_error.setObjectName("pushButton_close_error")
        self.horizontalLayout_3.addWidget(self.pushButton_close_error)
        self.horizontalLayout_2.addWidget(self.pop_up)
        self.verticalLayout_2.addWidget(self.top_bar)
        self.main = QtWidgets.QFrame(self.frame)
        self.main.setStyleSheet("")
        self.main.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.main.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main.setObjectName("main")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.main)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.content = QtWidgets.QFrame(self.main)
        self.content.setEnabled(True)
        self.content.setMinimumSize(QtCore.QSize(370, 500))
        self.content.setMaximumSize(QtCore.QSize(370, 500))
        self.content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.content.setStyleSheet("background-color: rgb(56, 58, 59); border-radius: 5px;")
        self.content.setObjectName("content")
        self.content.setFrameShape(QFrame.StyledPanel)
        self.content.setFrameShadow(QFrame.Raised)

        self.logo = QtWidgets.QFrame(self.content)
        self.logo.setGeometry(QtCore.QRect(30, 10, 311, 141))
        self.logo.setStyleSheet("background-image: url(files/img/trello_and_movidesk.png);\n"
                                "background-repeat: no-repeat;\n"
                                "background-position: center;\n"
                                "")
        self.logo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.logo.setFrameShadow(QtWidgets.QFrame.Plain)
        self.logo.setObjectName("logo")
        self.line_ticket = QtWidgets.QLineEdit(self.content)
        self.line_ticket.setGeometry(QtCore.QRect(40, 170, 115, 31))
        self.line_ticket.setFont(font)
        self.line_ticket.setStyleSheet("QLineEdit{\n"
                                       "    border: 2px solid rgb(120,120,120);\n"
                                       "    border-radius: 5px;\n"
                                       "    padding: 1px 3px;\n"
                                       "    background-color: rgb(79,79,79);\n"
                                       "    color: rgb(185, 185, 185);\n"
                                       "}\n"
                                       "QLineEdit:hover{\n"
                                       "    border: 2px solid rgb(70,70,70);\n"
                                       "}\n"
                                       "QLineEdit:focus{\n"
                                       "    border: 2px solid rgb(0,102,204);\n"
                                       "    color: rgb(200,200,200);\n"
                                       "}")
        self.line_ticket.setInputMask("")
        self.line_ticket.setMaxLength(5)
        self.onlyInt = QIntValidator()
        self.line_ticket.setValidator(self.onlyInt)
        # self.line_ticket.setFocus(0)
        self.line_ticket.setObjectName("line_ticket")
        self.comboBox_lists = QtWidgets.QComboBox(self.content)
        self.comboBox_lists.setGeometry(QtCore.QRect(200, 170, 141, 31))
        self.comboBox_lists.setFont(font)
        self.comboBox_lists.setStyleSheet("QComboBox{\n"
                                          "    border: 2px solid rgb(120,120,120);\n"
                                          "    border-radius: 5px;\n"
                                          "    padding: 1px 3px;\n"
                                          "    background-color: rgb(79,79,79);\n"
                                          "    color: rgb(185, 185, 185);\n"
                                          "}\n"
                                          "QComboBox:hover{\n"
                                          "    border: 2px solid rgb(70,70,70);\n"
                                          "}\n"
                                          "QComboBox:focus{\n"
                                          "    border: 2px solid rgb(0,102,204);\n"
                                          "    color: rgb(200,200,200);\n"
                                          "}\n"
                                          "")
        self.comboBox_lists.setEditable(False)
        self.comboBox_lists.setObjectName("comboBox_lists")
        self.list_miembros = QtWidgets.QListWidget(self.content)
        self.list_miembros.setSelectionMode(QAbstractItemView.MultiSelection)
        self.list_miembros.setGeometry(QtCore.QRect(15, 221, 180, 201))
        self.list_miembros.setStyleSheet("QListWidget{\n"
                                         "    border: 2px solid rgb(120,120,120);\n"
                                         "    border-radius: 5px;\n"
                                         "    padding: 1px 3px;\n"
                                         "    background-color: rgb(79,79,79);\n"
                                         "    color: rgb(185, 185, 185);\n"
                                         "}\n"
                                         "QListWidget:hover{\n"
                                         "    border: 2px solid rgb(70,70,70);\n"
                                         "}\n"
                                         "QListWidget:focus{\n"
                                         "    border: 2px solid rgb(0,102,204);\n"
                                         "    color: rgb(200,200,200);\n"
                                         "}")
        self.list_miembros.setObjectName("list_miembros")
        self.list_etiquetas = QtWidgets.QListWidget(self.content)
        self.list_etiquetas.setSelectionMode(QAbstractItemView.MultiSelection)
        self.list_etiquetas.setGeometry(QtCore.QRect(200, 221, 161, 201))
        self.list_etiquetas.setStyleSheet("QListWidget{\n"
                                          "    border: 2px solid rgb(120,120,120);\n"
                                          "    border-radius: 5px;\n"
                                          "    padding: 1px 3px;\n"
                                          "    background-color: rgb(79,79,79);\n"
                                          "    color: rgb(185, 185, 185);\n"
                                          "}\n"
                                          "QListWidget:hover{\n"
                                          "    border: 2px solid rgb(70,70,70);\n"
                                          "}\n"
                                          "QListWidget:focus{\n"
                                          "    border: 2px solid rgb(0,102,204);\n"
                                          "    color: rgb(200,200,200);\n"
                                          "}")
        self.list_etiquetas.setObjectName("list_etiquetas")
        self.pushButton_create = QtWidgets.QPushButton(self.content)
        self.pushButton_create.setGeometry(QtCore.QRect(110, 440, 161, 35))
        font.setPointSize(10)
        self.pushButton_create.setFont(font)
        self.pushButton_create.setStyleSheet("QPushButton{\n"
                                             "    border: 2px solid rgb(120,120,120);\n"
                                             "    border-radius: 5px;\n"
                                             "    padding: 1px 3px;\n"
                                             "    background-color: rgb(79,79,79);\n"
                                             "    color: rgb(185, 185, 185);\n"
                                             "}\n"
                                             "QPushButton:hover{\n"
                                             "    border: 2px solid rgb(70,70,70);\n"
                                             "}\n"
                                             "QPushButton:pressed{\n"
                                             "    background-color: rgb(0, 102,204);\n"
                                             "    border: 2px solid rgb(0,102,204);\n"
                                             "    color: rgb(200,200,200);\n"
                                             "}")
        self.pushButton_create.setObjectName("pushButton_create")

        self.label_loading = QtWidgets.QLabel(self.content)
        self.label_loading.setGeometry(QtCore.QRect(130, 445, 126, 22))
        self.label_loading.setFont(font)
        self.label_loading.setStyleSheet("color: rgb(185, 185, 185);")
        self.label_loading.setObjectName("label_loading")
        self.label_loading.setAlignment(QtCore.Qt.AlignCenter)

        self.loadinginfo_animation = QLabel(self.content)
        self.loadinginfo_animation.setGeometry(QtCore.QRect(130, 445, 126, 22))
        self.movie = QMovie("loading4.gif")
        self.loadinginfo_animation.setMovie(self.movie)
        self.movie.start()
        # self.timer = QTimer()

        self.label_miembros = QtWidgets.QLabel(self.content)
        self.label_miembros.setGeometry(QtCore.QRect(20, 206, 60, 13))
        self.label_miembros.setFont(font)
        self.label_miembros.setStyleSheet("color: rgb(185, 185, 185);")
        self.label_miembros.setObjectName("label_miembros")
        self.label_etiquetas = QtWidgets.QLabel(self.content)
        self.label_etiquetas.setGeometry(QtCore.QRect(205, 206, 60, 13))
        self.label_etiquetas.setFont(font)
        self.label_etiquetas.setStyleSheet("color: rgb(185, 185, 185);")
        self.label_etiquetas.setObjectName("label_etiquetas")
        self.horizontalLayout.addWidget(self.content)
        self.verticalLayout_2.addWidget(self.main)
        self.bottom_bar = QtWidgets.QFrame(self.frame)
        self.bottom_bar.setMinimumSize(QtCore.QSize(0, 30))
        self.bottom_bar.setMaximumSize(QtCore.QSize(16777215, 30))
        self.bottom_bar.setStyleSheet("background-color: rgb(98, 114, 164);")
        self.bottom_bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.bottom_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom_bar.setObjectName("bottom_bar")
        self.verticalLayout_2.addWidget(self.bottom_bar)
        self.verticalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)

        #
        #  FUNCTIONS
        #

        # BT Close Popup
        self.pushButton_close_error.clicked.connect(lambda: self.pop_up.hide())

        # Hide Elements
        self.pop_up.hide()
        self.loadinginfo_animation.hide()
        self.label_loading.hide()

        # Button Create Ticket
        self.pushButton_create.clicked.connect(self.checkFields)

        self.retranslateUi(MainWindow)

        self.loaddata(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def loaddata(self, MainWindow):
        # Load Data
        load_boards()
        name_of_lists = [dicts["name"] for dicts in lists_of_lists()]
        self.comboBox_lists.addItem('Seleciona Uma Lista')
        self.comboBox_lists.addItems(name_of_lists)

        name_of_labels = [dicts["name"] for dicts in labels() if len(dicts['name']) > 0]
        self.list_etiquetas.addItems(name_of_labels)

        name_of_members = [dicts["fullName"] for dicts in members()]
        self.list_miembros.addItems(name_of_members)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cria Card no Trello de Movidesk"))
        self.label_closemessage.setText(_translate("MainWindow", "Error"))
        self.line_ticket.setPlaceholderText(_translate("MainWindow", "Número do Ticket"))
        self.comboBox_lists.setCurrentText(_translate("MainWindow", "Seleciona Uma Lista"))
        self.comboBox_lists.setPlaceholderText(_translate("MainWindow", "Seleciona Uma Lista"))
        self.pushButton_create.setText(_translate("MainWindow", "Create"))
        self.label_miembros.setText(_translate("MainWindow", "Membros"))
        self.label_etiquetas.setText(_translate("MainWindow", "Etiquetas"))
        self.label_loading.setText(_translate("MainWindow", "Loading..."))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
